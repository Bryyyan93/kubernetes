# Deployment
apiVersion: {{ .Values.web.deploy.apiver }} 
kind: Deployment
metadata:   
  labels: 
    app.k8s.io: {{ .Values.web.deploy.name }}
  name: {{ .Values.web.deploy.name }} 
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app.k8s.io: {{ .Values.web.deploy.name }}
  strategy:
    type: {{ .Values.strategy }} 
  template:
    metadata:
      labels:
        app.k8s.io: {{ .Values.web.deploy.name }}
    spec:
      containers:
      - name: {{ .Values.web.service.name }} # Nombre del servicio
        image: "{{ .Values.image.repo }}:{{ .Values.image.webtag }}"
        ports: 
          - containerPort: {{ .Values.web.deploy.port }}
            protocol: {{ .Values.protocol }}
        # Comando que espera a los la DDBB este lista    
        command:
          - sh
          - -c
          - sleep 10 && python app.py
        # Definir secretos para la configuracion de la DDBB  
        env:
          - name: DB_HOST
            valueFrom:
              secretKeyRef:
                key: psqhost
                name: db-cred
          - name: DB_NAME
            valueFrom:
              secretKeyRef:
                key: psqdbname
                name: db-cred
          - name: DB_PASS
            valueFrom:
              secretKeyRef:
                key: psqpass
                name: db-cred
          - name: DB_PORT
            valueFrom:
              secretKeyRef:
                key: psqport
                name: db-cred
          - name: DB_USER
            valueFrom:
              secretKeyRef:
                key: psquser
                name: db-cred
          - name: POSTGRES_DB
            valueFrom:
              secretKeyRef:
                key: psqdb
                name: db-cred
        volumeMounts:
          - mountPath: {{ .Values.web.volumen.path }}
            name: {{ .Values.web.volumen.name }}
        # Limitar CPU a 1 CPU y 500M
        resources:
          requests:
            cpu: {{ .Values.web.resources.mincpu }} #100m # Solicita un 10% al iniciar
          limits:
            cpu: {{ .Values.web.limits.maxcpu }}
            memory: {{ .Values.web.limits.maxram }}
        # Liveness: verifica si el contenedor está "vivo"
        livenessProbe:
          httpGet:
            path: /health   # Endpoint de salud
            port: {{ .Values.web.deploy.port }}      # El puerto de la aplicación Flask
            scheme: HTTP    # Protocolo HTTP
          initialDelaySeconds: 20  # Espera 20 segundos antes de realizar la primera verificación
          periodSeconds: 30        # Verifica cada 30 segundos
          failureThreshold: 3      # Después de 3 fallos consecutivos, reinicia el contenedor
        # Readiness Probe: Comprueba que la app está lista para recibir tráfico
        readinessProbe:
          httpGet:
            path: /ready    # Endpoint de readiness
            port: {{ .Values.web.deploy.port }}      # El puerto de la aplicación Flask
            scheme: HTTP    # Protocolo HTTP
          initialDelaySeconds: 25   # Espera 25 segundos antes de realizar la primera verificación
          periodSeconds: 60         # Verifica cada 60 segundos
          failureThreshold: 1      # Después de 1 fallo, no dirige tráfico a este contenedor          
      # Secreto para inicializar docker hub y descargar las imagenes
      imagePullSecrets:
        - name: docker-secret      
      restartPolicy: Always
      # Volumen para almacenar logs
      volumes:
        - name: {{ .Values.web.volumen.name }}
          persistentVolumeClaim:
            claimName: {{ .Values.web.volumen.name }}                

# Service
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.k8s.io: {{ .Values.web.deploy.name }}
  name: {{ .Values.web.service.name }}
spec:
  type: ClusterIP
  ports:
    - protocol: {{ .Values.protocol }}
      port: {{ .Values.web.service.targetport }} # Puerto expuesto al que apunta el Ingress
      targetPort: {{ .Values.web.deploy.port }} # Puerto interno del contenedor
  selector:
    app.k8s.io: {{ .Values.web.deploy.name }}