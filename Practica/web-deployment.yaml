apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.k8s.io: web
  name: web
spec:
  replicas: 1
  selector:
    matchLabels:
      app.k8s.io: web
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.k8s.io: web
    spec:
      containers:
      - name: web-srv
        image: bryyyan/practica_contendores:appweb-k8s-v2
        ports:
          - containerPort: 5000
            protocol: TCP
        # Comando que espera a los la DDBB este lista    
        command:
          - sh
          - -c
          - sleep 10 && python app.py
        # Definir variables de entorno  
        env:
          - name: DB_HOST
            valueFrom:
              secretKeyRef:
                key: DB_HOST
                name: db-cred
          - name: DB_NAME
            valueFrom:
              configMapKeyRef:
                key: DB_NAME
                name: env-test1-env
          - name: DB_PASS
            valueFrom:
              secretKeyRef:
                key: DB_PASS
                name: db-cred
          - name: DB_PORT
            valueFrom:
              configMapKeyRef:
                key: DB_PORT
                name: env-test1-env
          - name: DB_USER
            valueFrom:
              configMapKeyRef:
                key: DB_USER
                name: env-test1-env
          - name: POSTGRES_DB
            valueFrom:
              secretKeyRef:
                key: POSTGRES_DB
                name: db-cred
        volumeMounts:
          - mountPath: /app/logs
            name: web-claim0
        # Limitar CPU a 100 milinucleos
        resources:
          requests:
            cpu: 100m
          limits:
            cpu: 200m      
      # Secreto para inicializar docker hub y descargar las imagenes
      imagePullSecrets:
        - name: docker-secret      
      restartPolicy: Always
      # Volumen para almacenar logs
      volumes:
        - name: web-claim0
          persistentVolumeClaim:
            claimName: web-claim0