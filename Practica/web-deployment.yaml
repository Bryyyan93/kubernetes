apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.k8s.io: web
  name: web
spec:
  replicas: 1
  selector:
    matchLabels:
      app.k8s.io: web
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.k8s.io: web
    spec:
      containers:
      - name: web-srv
        image: bryyyan/practica_contendores:appweb-k8s-v3
        ports:
          - containerPort: 5000
            protocol: TCP
        # Comando que espera a los la DDBB este lista    
        command:
          - sh
          - -c
          - sleep 10 && python app.py
        # Definir variables de entorno  
        env:
          - name: DB_HOST
            valueFrom:
              secretKeyRef:
                key: DB_HOST
                name: db-cred
          - name: DB_NAME
            valueFrom:
              configMapKeyRef:
                key: DB_NAME
                name: env-test1-env
          - name: DB_PASS
            valueFrom:
              secretKeyRef:
                key: DB_PASS
                name: db-cred
          - name: DB_PORT
            valueFrom:
              configMapKeyRef:
                key: DB_PORT
                name: env-test1-env
          - name: DB_USER
            valueFrom:
              configMapKeyRef:
                key: DB_USER
                name: env-test1-env
          - name: POSTGRES_DB
            valueFrom:
              secretKeyRef:
                key: POSTGRES_DB
                name: db-cred
        volumeMounts:
          - mountPath: /app/logs
            name: web-claim0
        # Limitar CPU a 1 CPU y 500M
        resources:
          requests:
            cpu: 100m # Solicita un 10% al iniciar
          limits:
            cpu: "1"
            memory: 500Mi
        # Liveness: verifica si el contenedor está "vivo"
        livenessProbe:
          httpGet:
            path: /health   # Endpoint de salud
            port: 5000      # El puerto de la aplicación Flask
            scheme: HTTP    # Protocolo HTTP
          initialDelaySeconds: 20  # Espera 20 segundos antes de realizar la primera verificación
          periodSeconds: 30        # Verifica cada 30 segundos
          failureThreshold: 3      # Después de 3 fallos consecutivos, reinicia el contenedor
        # Readiness Probe: Comprueba que la app está lista para recibir tráfico
        readinessProbe:
          httpGet:
            path: /ready    # Endpoint de readiness
            port: 5000      # El puerto de la aplicación Flask
            scheme: HTTP    # Protocolo HTTP
          initialDelaySeconds: 25   # Espera 25 segundos antes de realizar la primera verificación
          periodSeconds: 60         # Verifica cada 60 segundos
          failureThreshold: 1      # Después de 1 fallo, no dirige tráfico a este contenedor          
      # Secreto para inicializar docker hub y descargar las imagenes
      imagePullSecrets:
        - name: docker-secret      
      restartPolicy: Always
      # Volumen para almacenar logs
      volumes:
        - name: web-claim0
          persistentVolumeClaim:
            claimName: web-claim0